"""
Phase 0 MCP Client Implementation Demo

This script demonstrates the Phase 0 MCP Client SDK integration
including basic operations like connecting to servers, listing tools,
and performing operations.
"""

import asyncio
import logging
import json
from pathlib import Path

from mcp_gateway.mcp import (
    MCPClientWrapper, ServiceRegistryMCPAdapter,
    create_mcp_adapter
)
from mcp_gateway.core.service_registry import ServiceRegistry


# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)


async def demo_stdio_server():
    """
    Demonstrate connection to a stdio-based MCP server.
    
    This example shows how to connect to a local MCP server process.
    """
    logger.info("=== Demo: Stdio MCP Server ===")
    
    # Create a simple echo server configuration
    stdio_config = {
        "type": "stdio",
        "command": "python",
        "args": ["-c", """
import sys
import json

# Simple MCP server that echoes back requests
while True:
    try:
        line = sys.stdin.readline()
        if not line:
            break
        
        request = json.loads(line)
        
        # Handle different MCP methods
        if request.get("method") == "initialize":
            response = {
                "jsonrpc": "2.0",
                "id": request["id"],
                "result": {
                    "protocolVersion": "2024-11-05",
                    "capabilities": {"tools": {}},
                    "serverInfo": {"name": "echo-server", "version": "1.0.0"}
                }
            }
        elif request.get("method") == "tools/list":
            response = {
                "jsonrpc": "2.0",
                "id": request["id"],
                "result": {
                    "tools": [{
                        "name": "echo",
                        "description": "Echo back the input",
                        "inputSchema": {
                            "type": "object",
                            "properties": {"text": {"type": "string"}},
                            "required": ["text"]
                        }
                    }]
                }
            }
        else:
            response = {
                "jsonrpc": "2.0",
                "id": request.get("id"),
                "error": {"code": -32601, "message": "Method not found"}
            }
        
        print(json.dumps(response))
        sys.stdout.flush()
        
    except Exception as e:
        pass
"""]
    }
    
    async with MCPClientWrapper() as client:
        try:
            # Connect to the echo server
            session_id = await client.connect_server(
                server_name="Echo Server",
                transport_config=stdio_config
            )
            logger.info(f"âœ“ Connected to echo server, session: {session_id}")
            
            # Get server info
            info = await client.get_server_info(session_id)
            logger.info(f"âœ“ Server info: {info}")
            
            # List tools
            tools = await client.list_tools(session_id)
            logger.info(f"âœ“ Available tools: {[tool.name for tool in tools]}")
            
            # Disconnect
            success = await client.disconnect_server(session_id)
            logger.info(f"âœ“ Disconnected: {success}")
            
        except Exception as e:
            logger.error(f"Demo failed: {e}")


async def demo_session_management():
    """
    Demonstrate session management capabilities.
    """
    logger.info("=== Demo: Session Management ===")
    
    async with MCPClientWrapper() as client:
        # List initial sessions
        sessions = await client.list_active_sessions()
        logger.info(f"âœ“ Initial sessions: {len(sessions)}")
        
        # Create a dummy session config (won't actually connect)
        dummy_config = {
            "type": "stdio",
            "command": "echo",
            "args": ["hello"]
        }
        
        try:
            # This will fail but demonstrates error handling
            session_id = await client.connect_server(
                server_name="Dummy Server",
                transport_config=dummy_config
            )
        except Exception as e:
            logger.info(f"âœ“ Expected connection failure: {type(e).__name__}")
        
        # List sessions again
        sessions = await client.list_active_sessions()
        logger.info(f"âœ“ Final sessions: {len(sessions)}")


async def demo_configuration():
    """
    Demonstrate configuration management using ServiceRegistry.
    """
    logger.info("=== Demo: Configuration Management with ServiceRegistry ===")
    
    # Create ServiceRegistry adapter
    adapter = create_mcp_adapter()
    
    # Load services from services.yaml
    await adapter.service_registry.load_services()
    
    # Show available services
    services = adapter.list_enabled_services()
    logger.info(f"âœ“ Found {len(services)} enabled services in services.yaml")
    
    for service_id in services:
        try:
            info = adapter.get_service_info(service_id)
            logger.info(f"  - {service_id}: {info['name']} ({info['transport']})")
        except Exception as e:
            logger.warning(f"  - {service_id}: Error getting info - {e}")
    
    # Show global configuration
    global_config = adapter.get_global_config()
    logger.info(f"âœ“ Global config - timeout: {global_config['default_timeout']}s")
    
    # Show transport-specific services
    http_services = adapter.list_services_by_transport("http")
    stdio_services = adapter.list_services_by_transport("stdio")
    logger.info(f"âœ“ HTTP services: {len(http_services)}, Stdio services: {len(stdio_services)}")
    
    # Test transport config generation
    if services:
        test_service = services[0]
        try:
            transport_config = adapter.get_transport_config(test_service)
            logger.info(f"âœ“ Generated transport config for {test_service}: {transport_config['type']}")
        except Exception as e:
            logger.warning(f"âœ“ Transport config generation test failed (expected): {e}")
    
    logger.info("âœ“ Configuration demo using existing services.yaml completed")


async def demo_error_handling():
    """
    Demonstrate error handling and recovery.
    """
    logger.info("=== Demo: Error Handling ===")
    
    async with MCPClientWrapper(max_retries=1, retry_delay=0.1) as client:
        # Try to perform operations on non-existent session
        try:
            await client.list_tools("nonexistent_session")
        except Exception as e:
            logger.info(f"âœ“ Handled session error: {type(e).__name__}")
        
        # Try to connect with invalid config
        try:
            await client.connect_server(
                server_name="Invalid Server",
                transport_config={"type": "invalid_transport"}
            )
        except Exception as e:
            logger.info(f"âœ“ Handled transport error: {type(e).__name__}")


async def demo_health_monitoring():
    """
    Demonstrate health monitoring capabilities.
    """
    logger.info("=== Demo: Health Monitoring ===")
    
    async with MCPClientWrapper() as client:
        # Check health of non-existent session
        healthy = await client.health_check("nonexistent_session")
        logger.info(f"âœ“ Health check for invalid session: {healthy}")
        
        # List sessions
        sessions = await client.list_active_sessions()
        logger.info(f"âœ“ Active sessions for monitoring: {len(sessions)}")


async def main():
    """
    Run all Phase 0 implementation demos.
    """
    logger.info("ðŸš€ Starting Phase 0 MCP Client Implementation Demo")
    logger.info("=" * 60)
    
    demos = [
        demo_configuration,
        demo_session_management,
        demo_error_handling,
        demo_health_monitoring,
        # demo_stdio_server,  # Commented out as it requires special setup
    ]
    
    for demo in demos:
        try:
            await demo()
            logger.info("")  # Add spacing between demos
        except Exception as e:
            logger.error(f"Demo {demo.__name__} failed: {e}")
            logger.info("")
    
    logger.info("âœ… Phase 0 MCP Client Implementation Demo Complete!")
    logger.info("=" * 60)
    
    # Summary of Phase 0 accomplishments
    logger.info("ðŸ“‹ Phase 0 Implementation Summary:")
    logger.info("  âœ“ MCP Python SDK integration with uv dependency management")
    logger.info("  âœ“ Integration with existing ServiceRegistry and services.yaml")
    logger.info("  âœ“ Transport factory for stdio, HTTP, and authenticated HTTP")
    logger.info("  âœ“ Session manager with lifecycle and cleanup")
    logger.info("  âœ“ Client wrapper with high-level API")
    logger.info("  âœ“ ServiceRegistry adapter for seamless integration")
    logger.info("  âœ“ FastAPI integration for REST endpoints")
    logger.info("  âœ“ Comprehensive error handling and recovery")
    logger.info("  âœ“ Health monitoring and session tracking")
    logger.info("  âœ“ Test framework for validation")
    logger.info("")
    logger.info("ðŸŽ¯ Ready for Phase 1: Advanced Session Management")


if __name__ == "__main__":
    # Run the demo
    asyncio.run(main())
